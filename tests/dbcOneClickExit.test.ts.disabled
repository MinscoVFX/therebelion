import { describe, it, expect, vi } from 'vitest';
import { NextRequest } from 'next/server';

// Mock dependencies
vi.mock('../scaffolds/fun-launch/src/lib/rpc', () => ({
  resolveRpc: () => 'https://api.mainnet-beta.solana.com',
}));

vi.mock('../scaffolds/fun-launch/src/server/dbc-exit-builder', () => ({
  buildDbcExitTransaction: vi.fn(),
}));

vi.mock('@solana/web3.js', () => ({
  Connection: vi.fn(),
  Transaction: class MockTransaction {
    serialize() {
      return Buffer.from('mock-transaction');
    }
  },
}));

describe('dbc-one-click-exit route', () => {
  it('should return error for missing ownerPubkey', async () => {
    // Import the route handler  
    const { POST } = await import('../scaffolds/fun-launch/src/app/api/dbc-one-click-exit/route');
    
    const request = new NextRequest('http://localhost:3000/api/dbc-one-click-exit', {
      method: 'POST',
      body: JSON.stringify({}),
    });

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(400);
    expect(data.error).toBe('Missing ownerPubkey');
  });

  it('should return error for missing dbcPoolKeys.pool', async () => {
    const { POST } = await import('../../../app/api/dbc-one-click-exit/route');
    
    const request = new NextRequest('http://localhost:3000/api/dbc-one-click-exit', {
      method: 'POST',
      body: JSON.stringify({
        ownerPubkey: 'TestOwner123',
      }),
    });

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(400);
    expect(data.error).toBe('Missing dbcPoolKeys.pool');
  });

  it('should return error for missing dbcPoolKeys.feeVault', async () => {
    const { POST } = await import('../../../app/api/dbc-one-click-exit/route');
    
    const request = new NextRequest('http://localhost:3000/api/dbc-one-click-exit', {
      method: 'POST',
      body: JSON.stringify({
        ownerPubkey: 'TestOwner123',
        dbcPoolKeys: {
          pool: 'TestPool123',
        },
      }),
    });

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(400);
    expect(data.error).toBe('Missing dbcPoolKeys.feeVault');
  });

  it('should handle successful transaction building', async () => {
    // Mock the buildDbcExitTransaction function to return a successful result
    const { buildDbcExitTransaction } = await import('../../../server/dbc-exit-builder');
    const mockBuildDbcExitTransaction = buildDbcExitTransaction as ReturnType<typeof vi.fn>;
    
    const mockTransaction = {
      serialize: () => Buffer.from('mock-serialized-transaction'),
    };
    
    mockBuildDbcExitTransaction.mockResolvedValue({
      tx: mockTransaction,
      lastValidBlockHeight: 12345,
    });

    const { POST } = await import('../../../app/api/dbc-one-click-exit/route');
    
    const request = new NextRequest('http://localhost:3000/api/dbc-one-click-exit', {
      method: 'POST',
      body: JSON.stringify({
        ownerPubkey: 'TestOwner123',
        dbcPoolKeys: {
          pool: 'TestPool123',
          feeVault: 'TestFeeVault123',
        },
      }),
    });

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(200);
    expect(data.success).toBe(true);
    expect(data.tx).toBeDefined();
    expect(data.lastValidBlockHeight).toBe(12345);
    expect(data.description).toBe('Combined DBC fee claim and liquidity withdrawal');
  });
});