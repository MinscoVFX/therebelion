name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: pnpm/action-setup@v4
        with:
          version: 10.14.0
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      # Cache pnpm store (big speedup)
      - name: Get pnpm store path
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      # Choose ONE of the following two installs:
      - name: Install deps (strict)
        run: pnpm -w install --frozen-lockfile
      # - name: Install deps (lenient)
      #   run: pnpm -w install --no-frozen-lockfile

      # REMOVE the write step; only check
      # - name: Auto-format across all packages (Prettier)
      #   run: pnpm -r exec prettier --write .

      - name: Check formatting
        run: pnpm format:check

      - name: Lint code
        run: pnpm lint

      - name: Check dependency versions
        run: pnpm syncpack:check

      # Fail if anything modified the tree (optional but useful)
      - name: Ensure repo is clean
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "::error::Working tree dirty after checks. Run format locally and commit."
            git status --porcelain
            exit 1
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: pnpm/action-setup@v4
        with:
          version: 10.14.0
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Get pnpm store path
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-
      - name: Install deps
        run: pnpm -w install --frozen-lockfile
      - name: Build all packages
        run: pnpm build

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: pnpm/action-setup@v4
        with:
          version: 10.14.0
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Get pnpm store path
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-
      - name: Install deps
        run: pnpm -w install --frozen-lockfile
      - name: Type check
        run: pnpm run type-check

  claim-partner-fees:
    name: Claim Partner Fees
    runs-on: ubuntu-latest
    needs: [lint-and-format, build, type-check]
    timeout-minutes: 15
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      github.event_name == 'workflow_dispatch'
    concurrency:
      group: claim-partner-fees
      cancel-in-progress: false
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: pnpm/action-setup@v4
        with:
          version: 10.14.0
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Get pnpm store path
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-
      - name: Install deps
        run: pnpm -w install --frozen-lockfile

      # Decode Phantom base58 â†’ keypair.json (supports 32-byte seeds and 64-byte secrets)
      - name: Decode PK_B58 to keypair.json
        shell: bash
        run: |
          set -euo pipefail
          npx -y -p @solana/web3.js@1.98.2 -p bs58@4 -p tweetnacl@1 node -e "
            const fs = require('fs');
            const bs58 = require('bs58');
            const nacl = require('tweetnacl');
            const { Keypair } = require('@solana/web3.js');

            const s = (process.env.PK_B58 || process.env.PRIVATE_KEY_B58 || '').trim();
            if (!s) throw new Error('Missing PK_B58 or PRIVATE_KEY_B58');
            const secret = bs58.decode(s);

            let kp;
            if (secret.length === 64) {
              kp = Keypair.fromSecretKey(Uint8Array.from(secret));
            } else if (secret.length === 32) {
              const kpSeed = nacl.sign.keyPair.fromSeed(Uint8Array.from(secret));
              kp = Keypair.fromSecretKey(Uint8Array.from(kpSeed.secretKey));
            } else {
              throw new Error('Unsupported key length: ' + secret.length + ' (expected 32 or 64 bytes)');
            }

            fs.writeFileSync('keypair.json', JSON.stringify(Array.from(kp.secretKey)));
            console.log('Public key:', kp.publicKey.toBase58());
          "
        env:
          PK_B58: ${{ secrets.PK_B58 }}
          PRIVATE_KEY_B58: ${{ secrets.PRIVATE_KEY_B58 }}

      - name: Preflight env check
        run: |
          for v in RPC_URL DBC_OWNER FEE_CLAIMER; do
            if [ -z "${!v}" ]; then
              echo "::error::Missing required env var: $v"
              exit 1
            fi
          done
        env:
          RPC_URL: ${{ secrets.RPC_URL }}
          DBC_OWNER: ${{ secrets.DBC_OWNER }}
          FEE_CLAIMER: ${{ secrets.FEE_CLAIMER }}

      - name: Claim ALL partner fees
        run: pnpm studio:dbc-claim-all-fees-auto
        env:
          RPC_URL: ${{ secrets.RPC_URL }}
          DBC_OWNER: ${{ secrets.DBC_OWNER }}
          FEE_CLAIMER: ${{ secrets.FEE_CLAIMER }}
          KEYPAIR_PATH: ${{ github.workspace }}/keypair.json
          DEBUG: "true" # optional for richer logs

      - name: Clean up keypair.json
        if: always()
        run: rm -f keypair.json
