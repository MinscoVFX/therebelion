name: Claim Partner Fees

on:
  workflow_dispatch:

concurrency:
  group: claim-partner-fees
  cancel-in-progress: false

jobs:
  claim-partner-fees:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      # Cache pnpm store for speed
      - name: Get pnpm store path
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Install deps (strict)
        run: pnpm -w install --frozen-lockfile

      # Decode Phantom base58 -> keypair.json (handles 32-byte seed or 64-byte secret)
      - name: Decode PK_B58 to keypair.json
        shell: bash
        run: |
          set -euo pipefail
          npx -y -p @solana/web3.js@1.98.2 -p bs58@4 -p tweetnacl@1 node -e "
            const fs = require('fs');
            const bs58 = require('bs58');
            const nacl = require('tweetnacl');
            const { Keypair, PublicKey } = require('@solana/web3.js');

            const s = (process.env.PK_B58 || process.env.PRIVATE_KEY_B58 || '').trim();
            if (!s) throw new Error('Missing PK_B58 or PRIVATE_KEY_B58');
            const bytes = bs58.decode(s);

            let kp;
            if (bytes.length === 64) {
              kp = Keypair.fromSecretKey(Uint8Array.from(bytes));
            } else if (bytes.length === 32) {
              const pair = nacl.sign.keyPair.fromSeed(Uint8Array.from(bytes));
              kp = Keypair.fromSecretKey(pair.secretKey);
            } else {
              throw new Error('Unsupported key length: ' + bytes.length + ' (expected 32 or 64)');
            }

            fs.writeFileSync('keypair.json', JSON.stringify(Array.from(kp.secretKey)));
            console.log('Derived public key:', kp.publicKey.toBase58());
          "
        env:
          PK_B58: ${{ secrets.PK_B58 }}
          PRIVATE_KEY_B58: ${{ secrets.PRIVATE_KEY_B58 }}

      # Preflight: require essential env
      - name: Preflight env check
        run: |
          for v in RPC_URL DBC_OWNER FEE_CLAIMER; do
            if [ -z "${!v}" ]; then
              echo "::error::Missing required env var: $v"
              exit 1
            fi
          done
        env:
          RPC_URL: ${{ secrets.RPC_URL }}
          DBC_OWNER: ${{ secrets.DBC_OWNER }}
          FEE_CLAIMER: ${{ secrets.FEE_CLAIMER }}

      # Run the auto-claim script
      - name: Claim ALL partner fees (auto-discovery)
        id: claim
        run: |
          set -euo pipefail
          # Capture output to a log we can upload
          pnpm studio:dbc-claim-all-fees-auto 2>&1 | tee claim-run.log
        env:
          RPC_URL: ${{ secrets.RPC_URL }}
          DBC_OWNER: ${{ secrets.DBC_OWNER }}
          FEE_CLAIMER: ${{ secrets.FEE_CLAIMER }}
          KEYPAIR_PATH: ${{ github.workspace }}/keypair.json
          DEBUG: "true"

      - name: Upload claim log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: claim-run-log
          path: claim-run.log

      - name: Clean up keypair.json
        if: always()
        run: rm -f keypair.json
